// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  quizzes       Quiz[]    @relation("UserQuizzes")
  attempts      Attempt[] @relation("UserAttempts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Audio {
  id         String      @id @default(cuid())
  title      String
  artist     String?
  source     String? // Anime source
  filename   String      @unique
  duration   Int // Duration in seconds
  filepath   String // Path to stored audio file
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  timeframes Timeframe[]
  quiz       Quiz?       @relation(fields: [quizId], references: [id])
  quizId     String?
}

model Timeframe {
  id        String   @id @default(cuid())
  startTime Int // Start time in seconds
  endTime   Int // End time in seconds
  audio     Audio    @relation(fields: [audioId], references: [id], onDelete: Cascade)
  audioId   String
  options   Option[]
}

model Option {
  id          String    @id @default(cuid())
  text        String // The answer option text
  isCorrect   Boolean   @default(false)
  timeframe   Timeframe @relation(fields: [timeframeId], references: [id], onDelete: Cascade)
  timeframeId String
}

model Quiz {
  id          String    @id @default(cuid())
  title       String
  description String?
  createdBy   User      @relation("UserQuizzes", fields: [userId], references: [id])
  userId      String
  audios      Audio[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attempts    Attempt[]
  isPublic    Boolean   @default(false)
}

model Attempt {
  id        String   @id @default(cuid())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  user      User     @relation("UserAttempts", fields: [userId], references: [id])
  userId    String
  score     Int
  maxScore  Int
  createdAt DateTime @default(now())
}
